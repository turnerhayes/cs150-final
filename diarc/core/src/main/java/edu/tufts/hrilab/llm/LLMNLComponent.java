/*
 * Copyright Â© Thinking Robots, Inc., Tufts University, and others 2024.
 */

package edu.tufts.hrilab.llm;

import ai.thinkingrobots.trade.TRADEService;
import edu.tufts.hrilab.diarc.DiarcComponent;
import edu.tufts.hrilab.interfaces.NLUInterface;

import edu.tufts.hrilab.slug.common.Utterance;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

//TODO:brad: this is currently commented out so it can be run in parallel with current NL system, it doesn't actually receive utterance text right now, instead a call was added to dialogue that calls get prompt text
//public class LLMNLComponent  extends DiarcComponent implements NLPComponent, NLGComponent {
public class LLMNLComponent  extends DiarcComponent implements NLUInterface {


    //TODO:brad:not sure if we want to keep a single prompt instance around the whole time or make a new one for every call, or something else...
    DIARCPrompt prompt;
    String defaultPromptName= "resources/config/edu/tufts/hrilab/llm/prompts/diarcPrompt.txt";

    private boolean sendToPrag=false;
    private boolean sendToRR=false;
    private boolean sendToDialogue=false;
    public LLMNLComponent(){
        super();
        //prompt = new NaiveDIARCPrompt(defaultPromptName);
        prompt = new GSPChainPrompt(defaultPromptName);
    }

    //TODO:make prompt type settable from command line args, like action selector
//    @Override
//    protected  void init(){
//
//    }
//
//    @Override
    protected List<Option> additionalUsageInfo() {
        List<Option> options = new ArrayList<>();
        options.add(Option.builder("prag").desc("send output to a Pragmatics Component").build());
        options.add(Option.builder("rr").desc("send output to a Reference Resolution Component").build());
        options.add(Option.builder("dialogue").desc("send output to a Dialogue Component").build());
        return options;
    }

    @Override
    protected void parseArgs (CommandLine cmdLine) {
        if (cmdLine.hasOption("prag")) {
            sendToPrag = true;
        }
        if (cmdLine.hasOption("rr")) {
            sendToRR = true;
        }
        if (cmdLine.hasOption("dialogue")) {
            sendToDialogue = true;
        }
    }


    //This is the method from the NLP component interface that the TLDLParser also implements
    @Override
    public Utterance parseUtterance(Utterance u) {

        log.info("[parseUtterance] got utterance: " + u);

        //Get state info from DIARC
        prompt.getStateFromDIARC();
        //write prompt to file
        prompt.setHumanInput(u.getWordsAsString());
        String promptText = prompt.generate();
        writePromptToFile(defaultPromptName + prompt.getLatestTimeStamp(), promptText);

//        Completion completion= null;
//        try{
//            completion = (Completion) TRADE.callThe("chatCompletion", promptText);
//        } catch (TRADEException e) {
//            log.error("[parseUtterance]",e);
//        }

//        if(completion != null){
//            //TODO:brad: Convert the LLM output to a n Utterance appropriately. Will definitely need to set semantics. Maybe supplemental semantics & GHTier? Maybe Type?
//            //do we want to decode it with the prompt
//            Utterance newSemantics = new Utterance(u.getSpeaker(), u.getListeners(), Factory.createFOL(completion.getText()),u.getType());
//            log.info("[parseUtterance] new semantics as generated by LLM: "+newSemantics);
//        }

        return u;
    }

    //This is the method that the SimpleNLG component implements
//    @Override
    public Utterance convertSemanticsToText(Utterance u) {
        prompt.getStateFromDIARC();
        //write prompt to file
        String promptText = prompt.generate();

        //TODO:brad: send promptText to LLM
//            try {
//                realization = (Completion) TRADE.callThe("chatCompletion", promptText);
//            } catch (TRADEException e) {
//                throw new RuntimeException(e);
//            }

        //TODO:brad: add hook to LLM, add it to utterance
//            try {
//                realization = (Completion) TRADE.callThe("chatCompletion", promptText);
//            } catch (TRADEException e) {
//                throw new RuntimeException(e);
//            }

        return u;
    }


    /**
     * This is a testing/development method which provides the output of the current prompt at a given point
     *
     * @return text of the current prompt that would be generated if called
     */
    @TRADEService
    public String getPromptText(){
        prompt.getStateFromDIARC();
        return prompt.generate();
    }


    private File writePromptToFile(String filename, String contents) {
        File file;
        try {
            file = File.createTempFile(filename, ".txt");
            FileWriter writer = new FileWriter(file);
            writer.write(contents);
            writer.close();
            log.debug("Wrote prompt file: " + file.getAbsolutePath());
        } catch (IOException e) {
            log.error("Failed to generate prompt could not create file.", e);
            return null;
        }
        return file;
    }

}
